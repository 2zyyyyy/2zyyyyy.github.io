{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hexo 问题记录","text":"本文主要目的是为了记录一下Hexo博客在使用过程中遇到过的问题，不定时更新。 20200107 hexo s 启动异常提示： 权限异常，解决方案： 命令行使用 sudo su 输入密码即可 20200107 hexo s启动异常： 端口占用，2种解决方法： 1、修改blog/_config.yml配置文件，新增 server: port: 5000 compress: true header: true 端口自定义即可(推荐) 2、命令修改本次启动使用端口 hexo server -p 9527 该方法仅对本次生效（不推荐）","link":"/2020/01/07/Hexo-%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"title":"Allure测试报告","text":"关于Allure2 + Pytest 组合生成的测试报告之前在公司组内也有做过分享，今天在blog这边在记录一下。 ​ 这边分为5个步骤，系统是macOS 10.12，这边不涉及环境配置比如Python、Java环境。 Step1: 安装依赖包 Pip install pytest Pip install allure Pip install allure-pytest Pip install allure-python-commons *macOS 不建议在brew环境安装第三方依赖，路径问题会导致各种异常。 Step2: 创建项目创建项目Demo report下面2个目录是分别存放2个格式的测试报告，默认pytest执行的用例结果放在xml下，是json格式的，需要命令转换成html格式的测试报告存放于xml下。 Step3: 设计用例原则 文件名以test_.py文件和_test.py 以test_开头的函数 以Test开头的类 以test_开头的方法 不支持类init初始化 可使用@pytest.fixture() testcase：校验登录接口返回 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# @File:test_02.py# @Author:2zyyyyy# @Time:2019年04月25日# @Explain:import allureimport jsonimport requestsimport pytestclass TestDemo: @staticmethod @allure.step('post 请求获取接口返回结果') def login(): url = 'http://192.168.0.000:8071/auth-service/login' headers = { 'Content-Type': 'application/json;charset=UTF-8' } payload = { &quot;userMobile&quot;: &quot;00000000000&quot;, &quot;systemId&quot;: &quot;000&quot;, &quot;terminalType&quot;: &quot;000&quot;, &quot;password&quot;: &quot;000000&quot; } response = requests.post(url=url, data=json.dumps(payload), headers=headers) result = response.json() result_dict = dict() result_dict['code'] = result['code'] result_dict['description'] = result['description'] return result_dict @allure.feature('登录功能') @allure.story('验证参数1') def test_01(self): &quot;&quot;&quot; 校验返回值是否为0000 &quot;&quot;&quot; with allure.step('获取请求返回的code值'): code = TestDemo.login() with allure.step('校验结果'): allure.attach('期望结果', '0000') allure.attach('实际结果', '0000') assert code['code'] == '0000' @allure.feature('登录功能') @allure.story('验证参数2') def test_02(self): &quot;&quot;&quot; 校验description是否为oh yeah,通过了 &quot;&quot;&quot; with allure.step('获取接口返回的description'): desc = TestDemo.login() with allure.step('校验结果'): allure.attach('期望结果', 'oh yeah,通过了') allure.attach('实际结果', 'oh yeah,通过了') assert desc['description'] == 'oh yeah,通过了'if __name__ == '__main__': pytest.main(['-s', '-q', '--alluredir', '/AllureDemo/report/xml(json格式结果存放路径)', 'test_02.py']) pytest.main(['allure', 'generate', '/AllureDemo/report/xml(json格式结果存放路径)', '-o', '/AllureDemo/report/html(html格式结果存放路径)']) 一个登录，2条用例。main里面的2个命令分别执行用例生成结果，最后将json结果转换HTML格式。 Step4: 生成Allure测试报告一共有2步 先生成json格式的在转换成HTML格式①在项目终端执行pytest –s –q –alluredir [XML格式文件夹]②第一步没有异常执行allure generate ./report/xml -o ./report/html –clean第一个目录是生成XML格式报告的路径 第二个目录是生成HTML报告的路径 Step5: 查看测试报告打开./report/html/index.html 选择浏览器打开 Pytest命令拓展 pytest -v [caseDir] # 运行指定目录中所有用例 pytest -v [caseDir]/test_01.py 运行指定文件中的所有用例 pytest -v [caseDir ]/test_02.py::TestDemo 运行指定文件中的测试类 pytest -v [caseDir ]/test_01.py::test_001 运行指定测试用例函数","link":"/2019/12/27/Allure%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"},{"title":"Android RecyclerView实现复杂列表布局","text":"​ 这次学习的内容是使用RecyclerView来实现一些较为复杂的布局，比如一个item： 最左边是一个imageview，中间部分为textView，textView下面又是一个textView，最右边为一个imageview。 1、首先在activity_main.xml中添加RecyclerView，随后正如之前所说的分别针对左中右新建3个XML布局文件命名为item_type_one、two、three.随后对其进行布局配置。2、新建一个adapter添加模拟数据。然后针对布局新建三个viewholder。随后新建一个抽象类TypeAbstractViewHolder，将三个viewholder用到的同一个方法封装起来调用,将三个viewHolder继承自抽象类。为了优雅。activity_main.xml: 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot; android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot; android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot; android:paddingTop=&quot;@dimen/activity_vertical_margin&quot; tools:context=&quot;com.example.tony.recyclerviewdemo.MainActivity&quot;&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycleView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v7.widget.RecyclerView&gt;&lt;/RelativeLayout&gt; item_type_one.xml: 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:background=&quot;@android:color/white&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/avatar&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt; &lt;TextView tools:text = &quot;月满轩尼诗&quot; android:id=&quot;@+id/name&quot; android:layout_marginLeft=&quot;20dp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/LinearLayout&gt; item_type_two.xml: 1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; android:background=&quot;@android:color/white&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/avatar&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt; &lt;LinearLayout android:layout_marginLeft=&quot;20dp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:id=&quot;@+id/name&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; tools:text=&quot;月满轩尼诗&quot; /&gt; &lt;TextView android:id=&quot;@+id/content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;5dp&quot; tools:text=&quot;月满轩尼诗是一部好电影吗？&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; item_type_three.xml: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; android:background=&quot;@android:color/white&quot; android:gravity=&quot;center_vertical&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/avatar&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt; &lt;ImageView android:id=&quot;@+id/contentImage&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;60dp&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;20dp&quot; android:layout_marginRight=&quot;20dp&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;20dp&quot; android:orientation=&quot;vertical&quot; android:layout_centerVertical=&quot;true&quot; android:layout_toRightOf=&quot;@+id/avatar&quot; android:layout_toEndOf=&quot;@+id/avatar&quot; android:layout_marginStart=&quot;20dp&quot;&gt; &lt;TextView android:id=&quot;@+id/name&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; tools:text=&quot;月满轩尼诗&quot; /&gt; &lt;TextView android:id=&quot;@+id/content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;5dp&quot; tools:text=&quot;月满轩尼诗是一部好电影吗？&quot; /&gt; &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt; 这边提一个小技巧，一般textview如果不设置文本内容的话是无法预览的，这里我们在属性中添加一个：tools:text=”abc”;这个时候abc就会在UI上面显示出来了，而且abc也不用加入string.xml. Java文件：MAinActivity.class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.example.tony.recyclerviewdemo;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity { private RecyclerView mRecyclerView; private DemoAdapter mAdapter; int colors[] = {android.R.color.holo_blue_light, android.R.color.holo_orange_light, android.R.color.holo_red_light}; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mRecyclerView = (RecyclerView) findViewById(R.id.recycleView); mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)); mAdapter = new DemoAdapter(this); mRecyclerView.setAdapter(mAdapter); initData(); } private void initData() { List&lt;DataModel&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 20; i++) { int type = (int) (Math.random() * 3 + 1); DataModel data = new DataModel(); data.avatarColor = colors[type - 1]; data.type = type; data.name = &quot;Name: &quot; + i; data.content = &quot;Content: &quot; + i; data.contentColor = colors[(type + 1) % 3]; list.add(data); } mAdapter.addList(list); mAdapter.notifyDataSetChanged(); }} DemoAdapter.class 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.example.tony.recyclerviewdemo;import android.content.Context;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.ViewGroup;import java.util.ArrayList;import java.util.List;/* * Created by Tony on 2016/12/3. */public class DemoAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;{ private LayoutInflater mLayoutInflater; private List&lt;DataModel&gt; mList = new ArrayList&lt;&gt;(); public DemoAdapter(Context context) { mLayoutInflater = LayoutInflater.from(context); } public void addList(List&lt;DataModel&gt; list) { mList.addAll(list); } @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { switch (viewType) { case DataModel.TYPE_ONE: return new TypeOneViewHolder(mLayoutInflater.inflate(R.layout.item_type_one, parent, false)); case DataModel.TYPE_TWO: return new TypeTwoViewHolder(mLayoutInflater.inflate(R.layout.item_type_two, parent, false)); case DataModel.TYPE_THREE: return new TypeThreeViewHolder(mLayoutInflater.inflate(R.layout.item_type_three, parent, false)); } return null; } @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { ((TypeAbstractViewHolder) holder).bindHolder(mList.get(position)); } @Override public int getItemViewType(int position) { return mList.get(position).type; } @Override public int getItemCount() { return mList.size(); }} DataModel.class 123456789101112131415161718192021222324package com.example.tony.recyclerviewdemo;/** * Created by Tony on 2016/12/3. */public class DataModel { public static final int TYPE_ONE = 1; public static final int TYPE_TWO = 2; public static final int TYPE_THREE = 3; public int type; public int avatarColor; public String name; public String content; public int contentColor;} TypeAbstractViewHolder.class 12345678910111213141516package com.example.tony.recyclerviewdemo;import android.support.v7.widget.RecyclerView;import android.view.View;/** * Created by Tony on 2016/12/3. */public abstract class TypeAbstractViewHolder extends RecyclerView.ViewHolder{ public TypeAbstractViewHolder(View itemView) { super(itemView); } public abstract void bindHolder(DataModel model);} TypeOneViewHolder.class 1234567891011121314151617181920212223242526272829package com.example.tony.recyclerviewdemo;import android.view.View;import android.widget.ImageView;import android.widget.TextView;/** * Created by Tony on 2016/12/3. */public class TypeOneViewHolder extends TypeAbstractViewHolder { private ImageView avatar; private TextView name; public TypeOneViewHolder(View itemView) { super(itemView); avatar = (ImageView) itemView.findViewById(R.id.avatar); name = (TextView) itemView.findViewById(R.id.name); } //ViewHolder数据和外面数据绑定起来 @Override public void bindHolder(DataModel model) { avatar.setBackgroundResource(model.avatarColor); name.setText(model.name); }} TypeTwoViewHolder.class 12345678910111213141516171819202122232425262728293031323334package com.example.tony.recyclerviewdemo;import android.support.v7.widget.RecyclerView;import android.view.View;import android.widget.ImageView;import android.widget.TextView;/** * Created by Tony on 2016/12/3. */public class TypeTwoViewHolder extends TypeAbstractViewHolder { private ImageView avatar; private TextView name; private TextView content; public TypeTwoViewHolder(View itemView) { super(itemView); avatar = (ImageView) itemView.findViewById(R.id.avatar); name = (TextView) itemView.findViewById(R.id.name); content = (TextView) itemView.findViewById(R.id.content); } //ViewHolder数据和外面数据绑定起来 @Override public void bindHolder(DataModel model) { avatar.setBackgroundResource(model.avatarColor); name.setText(model.name); content.setText(model.content); }} TypeThreeViewHolder.class 12345678910111213141516171819202122232425262728293031323334353637package com.example.tony.recyclerviewdemo;import android.view.View;import android.widget.ImageView;import android.widget.TextView;/** * Created by Tony on 2016/12/3. */public class TypeThreeViewHolder extends TypeAbstractViewHolder { private ImageView avatar; private TextView name; private TextView content; private ImageView contentImage; public TypeThreeViewHolder(View itemView) { super(itemView); avatar = (ImageView) itemView.findViewById(R.id.avatar); contentImage = (ImageView) itemView.findViewById(R.id.contentImage); name = (TextView) itemView.findViewById(R.id.name); content = (TextView) itemView.findViewById(R.id.content); } //ViewHolder数据和外面数据绑定起来 @Override public void bindHolder(DataModel model) { avatar.setBackgroundResource(model.avatarColor); name.setText(model.name); contentImage.setBackgroundResource(model.contentColor); content.setText(model.content); }}","link":"/2019/12/26/Android-RecyclerView%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E5%88%97%E8%A1%A8%E5%B8%83%E5%B1%80/"},{"title":"Java 装饰者","text":"Java 当中的io流 今天记录下关于装饰者的学习一、处理流使用实例 1、本地新建一个users文本文档（刚入门没有使用IDE，都是在字符界面下进行编译和运行的，用文本文档进行代码的编写），内容如下： 张三 最强王者 850点 李四 超凡大师 700点 赵武 璀璨砖石 85点 王八 最强青铜 0点 刘六 不屈白银 25点 孙九 荣耀黄金 35点 //随便写的哈哈哈; //目的就是使用节点流来读取文件（单位：行）； 2、新建Test.java文件（.txt改一下后缀名即可，看不到的同学记得文件夹选项中点了显示已知文件和文件夹后缀名的选项；）下面贴代码： `//导入类java.io.*;12345678910111213141516171819202122232425262728293031class Test{ public static void main(String args []){ FileReader filereader = null; BufferedReader bufferedreader = null; try{ filereader = new FileReader(&quot;e:/eclipse/src/2016.02.25/users.txt&quot;); bufferedreader = new BufferedReader(filereader); String line = null; while(true){ line = bufferedreader.readLine(); if(line == null){ break; } System.out.println(line); } } catch(Exception e){ System.out.println(e); } finally{ try{ filereader.close(); bufferedreader.close(); } catch(Exception e){ System.out.println(e); } } }}` 3、编译运行 ==》win+R -- cmd -- 文件件路径输进去 -- javac *.java -- java Test 结果就是![运行结果](http://img.blog.csdn.net/20160302145715612)二：“装饰者”模式 1、举个Mars老师的例子吧 就是有一个工人的类 下面又分为各种工人比如说（水管工 木匠工 等等） 然后工人们又分为有A 公司的，B公司的，C公司的一次类推，如果每个工人都要写一个类的话，我们假设有N个工种，有M个公司，那么我们需要新建的class的个数就是：M*N个 这点很明显不符合计算机语言的做法，编程就是去繁化简，争取消灭所有的重复性的代码。因此就需要用到“装饰者”模式了。 2、新建一个接口名为 Aworker： Worker{1234567891011121314151617181920212223242526272829303132333435363738394041 public void doSomeWorker();} 新建水管工、木匠工、A公司、B公司类 //水管工 class Plumber implements Worker{ public void doSomeWorker(){ System.out.println(&quot;修水管！！！&quot;); }} //木匠工 class Carpenter implements Worker{ public void doSomeWorker(){ System.out.println(&quot;修门窗！！！&quot;); }} //A公司 class Aworker implements Worker{ private Worker worker; public Aworker(Worker worker){ this.worker = worker; } public void doSomeWorker(){ System.out.println(&quot;你好&quot;); worker.doSomeWorker(); }} //B公司 class Bworker implements Worker{ private Worker worker; public Bworker(Worker worker){ this.worker = worker; } public void doSomeWorker(){ System.out.println(&quot;我要带鞋套@@@@&quot;); worker.doSomeWorker(); }} 最后新建一个主函数来运行程序​ Test01{123456789101112 public static void main(String args []){ //生成一个A公司水管工的对象 Plumber plumber = new Plumber(); Aworker aworker1 = new Aworker(plumber); aworker1.doSomeWorker(); //生成一个B公司的木匠工对象 Carpenter carpenter = new Carpenter(); Bworker bworker1 = new Bworker(carpenter); bworker1.doSomeWorker(); }} 运行结果：![运行结果](http://img.blog.csdn.net/20160302151838939)三、节点流与处理流之间的关系 FileReader在（被装饰者）就是节点流，是真正读取数据的（单位：字符） 而处理流（装饰者）就是用来 给节点流添加功能的 ，使得前者可以一行一行的读取数据（BufferedReader）.","link":"/2019/12/26/Java-%E8%A3%85%E9%A5%B0%E8%80%85/"},{"title":"Jenkins(Win)构建失败,提示：xx不是内部或外部命令 也不是可运行程序或批处理文件","text":"最近在Windows上面玩Jenkins，创建demo项目之后想让他执行Python -m 命令，提示我该命令不是内部或外部命令 也不是可运行程序或批处理文件， 但是win+R下面运行又是正常的，查询了一下其他博主发现是环境变量没有配置导致的问题。下面就简单介绍一下如果遇到这个问题应该如何解决吧。 Step1:Jenkins首页-点击[构建执行状态] ###Step2: 找到右上角的[设置]按钮，点击 Step3：​ 跳转到设置页面： 新增一个[path]环境变量，值有2部分组成：1是Python文件夹 2是文件夹下Scripts目录,中间分号隔开，点击保存。 Step5:重新构建项目，查看控制台输出","link":"/2019/12/30/Jenkins-Windows-%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5-%E6%8F%90%E7%A4%BA-pytest-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"},{"title":"Java-图书管理系统","text":"模拟借书系统，任务要求： 感觉自己的写出来的代码不够简洁，参考了其他的案例写了一个，效果如下：结构：运行异常1：运行异常2：运行异常3：正常运行：1、名称查询2、序号查询：Book.java: 123456789101112package com.tony;/* * 图书租赁系统 */public class Book { public String bookName; public int bookId; public Book(String bookName, int bookId){ this.bookName = bookName; this.bookId = bookId; } } 自定义异常类MyException.java: 12345678910package com.tony;/* * 自定义异常类 */public class MyException extends Exception{ //有参构造方法 public MyException(String message) { super(message); };} BorrowBook.java: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package com.tony;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Scanner;/* * 主程序 */public class BorrowBook { Book book [] = {new Book(&quot;高等数学&quot;, 1), new Book(&quot;大学英语&quot;, 2), new Book(&quot;Android&quot;, 3), new Book(&quot;会计基础&quot;, 4)}; public List&lt;Book&gt; listBooks; //无参构造方法 public BorrowBook() { this.listBooks = new ArrayList&lt;Book&gt;(); } public void addBook(){ listBooks.addAll(Arrays.asList(book)); } public void systemOut() { System.out.println(&quot;*******欢迎使用借书系统*******&quot;); System.out.println(&quot;*-*-*-*图书一览表：*-*-*-*&quot;); System.out.println(&quot; 书名&quot; + &quot;\\t\\t&quot; + &quot;序号&quot;); for(Book book:listBooks) { System.out.println(book.bookName + &quot;\\t\\t &quot; +book.bookId); } } private Scanner scanner = new Scanner(System.in); public static void main(String[] args) { BorrowBook borrowBook = new BorrowBook(); borrowBook.addBook(); borrowBook.systemOut(); while(true) { System.out.println(&quot;输入命令：1-按照名称查找图书;2-按照序号查找图书&quot;); switch (borrowBook.scanf()) { case 1://根据用户不同的输入内容执行 try { System.out.println(&quot;书籍：&quot; + borrowBook.findByName()); break; } catch (Exception e) { System.out.println(e.getMessage()); continue; } case 2: try { System.out.println(&quot;书籍：&quot; + borrowBook.findById()); break; } catch (Exception e) { System.out.println(e.getMessage()); continue; } default: System.out.println(&quot;命令错误，请重试.&quot;); continue; } break; } borrowBook.scanner.close(); } public String findByName() throws MyException{ System.out.println(&quot;*****请输入书籍的名称--&gt;&quot;); String name = scanner.next(); for (Book books : book) { if (name.equals(books.bookName)) { return books.bookName + &quot;\\t序号：&quot; +books.bookId; } } throw new MyException(&quot;名称错误，请重试.&quot;); } public String findById() throws MyException { System.out.println(&quot;*****请输入书籍的序号--&gt;&quot;); int in = scanner.nextInt(); for (int i = 0; i &lt; book.length; i++) { if (in == (i + 1)) { return book[i].bookName + &quot;\\t序号：&quot; + (i+1); } } throw new MyException(&quot;下标越界，请重试.&quot;); } public int scanf() { try { int in = scanner.nextInt(); return in; } catch(Exception e) { scanner = new Scanner(System.in); return -1; } }}","link":"/2019/12/26/Java-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"title":"Win10 远程连接Ubuntu错误(xrdp_mm_process_login_response:login failed)","text":"最近看到阿里云服务器优惠活动，最便宜的一年只需要￥89， 于是买了一个打算折腾一下，ssh连接上去之后，用win自带的远程连接登录查看可视化界面时，却总是提示失败 baidu、Google查了好久最后才意识到是不是键盘大小写的问题(阿里云服务器在设置密码的时候有包含大写字母)，修改成小写的之后就可以登录成功了。 后面有时间整理一下从购买服务器到SSH、RDP连接的一个流程。","link":"/2020/01/10/Win10-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Ubuntu%E9%94%99%E8%AF%AF-xrdp/"},{"title":"我的第一篇Hexo博客","text":"原CSDN博客迁移说明https://blog.csdn.net/qq_31568297 这是在CSDN上的博客地址之前由于账户异常原因无法登录，现将迁移至Hexo目前该网站内容暂未做填充，内容会慢慢迁移过来，平时工作学习生活也将在这里记录","link":"/2019/12/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/"},{"title":"数据平台基础记录","text":"ETL(Extraction-Transformation-Loading) 数据抽取、转换和加载 ODS —— 操作性数据 DW —— 数据仓库 DM —— 数据集市 模糊查询表名 show tables like ‘name‘ 查看表结构信息 desc formatted 表名 统计数据验证 1、基础数据 新增用户 / 活跃用户 / 启动/访问次数 / 人均使用时长 检查数据发现当用户未登录状态时，写入的user_event.user_id为空 统计结果时未作区分 20190816当天数据都是未登录状态下产生的 统计结果新增和活跃用户均为：1 查询当日活跃用户数量 「表名」-「user_page」 SELECT count(*) as total FROM (SELECT count(*) FROM datacenter.user_event where created_ymd = '20190819' GROUP BY user_id) a ; 统计当日页面停留时长 1️⃣规则：有A、B两个页面 统计页面停留时长 A页面停留时长=B.开始时间 - A.开始时间 B页面停留时长=B.end_time - b.start_time – 计算人均使用时长 – 时间不允许就用了比较麻烦的办法 一共三条SQL – ①先查询出当日所有活跃用户数 ②在查询出当日生成的所有trackID③计算每个trackID的时长（因为最后一条数据是需要end_time-start_time 所以单独计算）所有trackID相加为当日用户在线时长 – ① 统计当日活跃用户数 SELECT COUNT(*) AS '当日活跃用户数' FROM (SELECT * FROM datacenter.user_page where created_ymd = '20190819' GROUP BY track_id) a; – ②查询当日所有trackID SELECT ​ track_id FROM ​ datacenter.user_page WHERE ​ created_ymd = '20190922' GROUP BY ​ track_id; # ③计算某个trackid的时长（2结果相加为当前trackID时长） SELECT ​ sum( ​ ( ​ UNIX_TIMESTAMP(e.start_time) - UNIX_TIMESTAMP(b.start_time) ​ ) ​ ) AS '当前trackID时长', (SELECT ​ (UNIX_TIMESTAMP(end_time) - UNIX_TIMESTAMP((start_time))) AS '最后一条时长' FROM datacenter.user_page WHERE track_id = '135A6B1B-E35A-4CA4-953E-E670F6339AE3' ORDER BY ​ start_time DESC LIMIT 1) AS '最后一条的时长' FROM ​ ( ​ SELECT ​ a.start_time, ​ (@i := @i + 1) AS ord_num ​ FROM ​ user_page a, ​ (SELECT @i := 1) d ​ WHERE ​ a.track_id = '135A6B1B-E35A-4CA4-953E-E670F6339AE3' ​ ORDER BY ​ a.start_time ​ ) b INNER JOIN ( ​ SELECT ​ a.start_time, ​ (@j := @j + 1) AS ord_num ​ FROM ​ user_page a, ​ (SELECT @j := 0) c ​ WHERE ​ a.track_id = '135A6B1B-E35A-4CA4-953E-E670F6339AE3' ​ ORDER BY ​ a.start_time ) e ON b.ord_num = e.ord_num;","link":"/2020/01/07/%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%9F%BA%E7%A1%80%E8%AE%B0%E5%BD%95/"},{"title":"本地图片测试","text":"测试图片显示本地图片显示测试 1、方式有多种 我采用的是引用本地绝对路径 当然你也可以引用相对路径或者标签插件2、无须设置_config.yml中的post_asset_folder 默认为true 默认为false3、文章中图片使用！[](图片路径)如果是缩略图的话需要在icarus中的_config.yml.thumbnail设置为true,随后在文章的头部新增该标签，放入图片路径。thumbnail: /images/***.jpg","link":"/2019/12/25/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"},{"title":"自动化测试发送邮件异常","text":"​ 今天在学习发送邮件的时候遇到了几个问题，这边一是记录一下 二是给同样遇到问题的同学解惑 1、这个问题我发生的原因是163邮箱 SMTP协议未开启，如果已开启还是报这个错误尝试重新开启一次。开启之后是设置变量也好还是input密码记住不能用163邮箱的登录密码，而是需要使用设置的客户端授权密码。以上针对我出现的这个问题得到了解决。2、看廖雪峰的简单邮件实例发现自己运行后报554，官方解释就是被屏蔽了。 1234567891011121314151617181920from email.mime.text import MIMETextimport smtplibfrom email.header import Headermsg = MIMEText('真的不知道是什么原因', 'plain', 'utf-8')# 输入Email地址和口令:from_addr = 'xxx@163.com'password = '客户端授权密码'# 输入收件人信息:to_addr = 'xxx@qq.com'# 输入SMTP服务器地址:smtp_server = 'smtp.163.com'server = smtplib.SMTP(smtp_server, 25) # SMTP协议默认端口是25server.set_debuglevel(1) # 打印出和SMTP服务器交互的所有信息server.login(from_addr, password)server.sendmail(from_addr, [to_addr], msg.as_string())server.quit()print('success') 这样的163–&gt;qq 邮箱的（别的我没有试过）是不会成功的，一直报554的错误。我网上找了几个办法好像都行不通。后来我仔细琢磨了一下屏蔽原因会不会是右键内容太过单调而导致的呢。于是我新增了几个属性 123msg['Subject'] = Header('放假通知', 'utf-8')msg['From'] = 'xxx@163.com'msg['To'] = &quot;xxx@qq.com&quot; 运行成功。","link":"/2019/12/25/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%BC%82%E5%B8%B8-554/"},{"title":"golang 学习记录","text":"记录一下go语言的学习之路，持续更新~~ 一、 Go基础1、Hello World​ 第一章主要是go入门，只要是有其他语言基础或者计算机专业的这一章都是比较简单的，记录一下练习的代码 123456789package main// 导入语句import \"fmt\"// 程序入口func main() { fmt.Print(\"Hello World!\")} 2、常量与变量12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package main// 导入语句import \"fmt\"// 批量声明变量var ( name string age int sex bool)// 批量声明常量const ( n1 = 100 n2 n3)// iota 枚举const ( a1 = iota // 0 a2 // 1 a3 // 2)// 题目const ( b1 = iota //0 b2 //1 _ //2,丢弃的 b3 // 3)// 插队const ( c1 = iota //0 c2 = 100 //100 c3 = iota //0+1+1=2 c4 // 2+1=3)// 多个常量声明在一行 在一个const中每新增一行常量声明 iota+1const ( d1, d2 = iota + 1, iota + 2 //d1=0+1 d2=0+2 d3, d4 = iota + 1, iota + 2 //d3=1+1 d4=1+2)// 定义数量级const ( _ = iota //=0,丢弃 KB = 1 &lt;&lt; (10 * iota) MB = 1 &lt;&lt; (10 * iota) GB = 1 &lt;&lt; (10 * iota) TB = 1 &lt;&lt; (10 * iota) PB = 1 &lt;&lt; (10 * iota))// 程序入口func main() { //s输出变量 name = \"月满轩尼诗\" age = 18 sex = false fmt.Print(sex) fmt.Println(age) fmt.Printf(\"name:%s\", name) fmt.Println() fmt.Println(b1) fmt.Println(b2) fmt.Println(b3) fmt.Println(c1) fmt.Println(c2) fmt.Println(c3) fmt.Println(c4) fmt.Println(d1) fmt.Println(d2) fmt.Println(d3) fmt.Println(d4) fmt.Println(KB) fmt.Println(MB) fmt.Println(GB) fmt.Println(TB) fmt.Println(PB)} 3、整型1234567891011121314151617181920212223package mainimport \"fmt\"//整型func main() { // 十进制 var n1 = 101 fmt.Printf(\"%d\\n\", n1) fmt.Printf(\"%b\\n\", n1) //10进制-&gt;2进制 fmt.Printf(\"%o\\n\", n1) //10进制-&gt;8进制 fmt.Printf(\"%x\\n\", n1) //10进制-&gt;16进制 //八进制 n2 := 077 fmt.Printf(\"%d\\n\", n2) fmt.Printf(\"\") //十六进制 n3 := 0x1234567 fmt.Printf(\"%d\\n\", n3)} 4、浮点数1234567891011121314package mainimport \"fmt\"// 浮点数func main() { //math.MaxFloat32 //float32最大值 f1 := 1.234556789 fmt.Printf(\"%T\\n\", f1) // 默认go语言中的小数都是float64类型 f2 := float32(1.23456) fmt.Printf(\"%T\\n\", f2) //显示声明float32类型} 5、布尔型1234567891011package mainimport \"fmt\"// 布尔值func main() { b1 := true var b2 bool // 默认false fmt.Printf(\"%T\\n\", b1) fmt.Printf(\"%T value:%v\\n\", b2, b2)} 6、Fmt输出1234567891011121314151617181920package mainimport \"fmt\"// fmt占位符func main() { var n = 100 // 查看类型 fmt.Printf(\"%T\\n\", n) // 类型 fmt.Printf(\"%v\\n\", n) //值 fmt.Printf(\"%d\\n\", n) //十进制 fmt.Printf(\"%b\\n\", n) //二进制 fmt.Printf(\"%o\\n\", n) //八进制 fmt.Printf(\"%x\\n\", n) //十六进制 s := \"golong学习第一天\" fmt.Printf(\"%s\\n\", s) fmt.Printf(\"%v\\n\", s) fmt.Printf(\"%#v\\n\", s)} 7、字符串12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package mainimport ( \"fmt\" \"strings\")// 字符串 go语言字符串\"双引号包裹\"， 单引号是字符'你'、'g'func main() { // 单行字符串 s := \"/Users/Tony/go/src/github.io/2zyyyyy\" fmt.Printf(\"%#v\\n\", s) // 多行字符串 s2 := ` 世情薄 人情恶 雨送黄昏花易落 ` fmt.Println(s2) // 字符串相关操作 fmt.Println(len(s)) // 输出长度 //字符串拼接 name := \"测试\" world := \"test\" s3 := name + world // 通过+拼接 println(s3) s4 := fmt.Sprintf(\"%s%s\", name, world) // sprint 返回字符串变量 fmt.Println(s4) // 分隔字符串 ret := strings.Split(s, \"/\") fmt.Println(ret) // 字符串包含 fmt.Println(strings.Contains(s4, \"测试\")) // 前缀 fmt.Println(strings.HasPrefix(s4, \"测试\")) // 返回true // 后缀 fmt.Println(strings.HasSuffix(s4, \"测试\")) // 返回false // 输出字符串出现的位置 sss := \"abc测试字符串@@@c\" fmt.Println(len(sss)) fmt.Println(strings.Index(sss, \"测试\")) fmt.Println(strings.LastIndex(sss, \"c\")) // 拼接 fmt.Println(strings.Join(ret, \"*\"))} 8、Byte&amp;&amp;Rune123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package mainimport ( \"fmt\" \"strconv\" \"unicode\")// byte 和 rune 类型// go语言为了处理非ASCII码类型的字符 定义了新的rune类型func main() { s := \"月满轩尼诗\" // len() 求得是byte字节的数量 n := len(s) fmt.Println(n) /* for i := 0; i &lt; len(s); i++ { fmt.Println(s[i]) fmt.Printf(\"%c\\n\", s[i]) // %c 字符 } */ for _, c := range s { // 从字符串中拿出具体的字符 fmt.Printf(\"%c\\n\", c) // %c: 字符 } // 字符串修改 原则上不能修改 需要转换成其他变量 s2 := \"我是被修改的字符串\" s3 := []rune(s2) // 把字符串强制转换成rune切片 s3[0] = '你' // s2是字符串 单独修改第一个需要是字符 故 '你' 单引号包裹 fmt.Println(string(s3)) a1 := \"绿\" // string a2 := '绿' //rune(int32) fmt.Printf(\"a1:%T a2:%T\\n\", a1, a2) // 类型转换 n1 := 10 var f float64 f = float64(n1) fmt.Println(f) fmt.Printf(\"%T\\n\", f) // 练习：统计一个字符串中汉字的数量 str := \"1234我是汉字I'm man!@#$%^&amp;*()_+\" var count int for _, v := range str { if unicode.Is(unicode.Han, v) { count++ } } fmt.Println(\"当前字符串\" + str + \"\\n\" + \"共有：\" + strconv.Itoa(count) + \"个中文汉字\")} 9、If条件判断12345678910111213141516171819202122232425262728293031323334package mainimport \"fmt\"// if条件判断func main() { age := 18 if age &gt;= 18 { fmt.Println(\"大于18，条件1通过！\") } else { fmt.Println(\"小于18，条件1未通过，通过条件2\") } // 多个条件 score := 75 if score &gt;= 90 { fmt.Println(\"优秀！！！\") } else if score &gt;= 75 { fmt.Println(\"良好~~\") } else if score &gt;= 60 { fmt.Println(\"及格...\") } else { fmt.Println(\"不及格???\") } // 特殊写法 作用域 if num := 9; num &gt;= 0 { // num 局部变量 fmt.Println(\"大于等于9\") } else { fmt.Println(\"小于等于9\") } // fmt.Println(num) num无法找到 这样写节省内存占用} 10、for循环123456789101112131415161718192021222324252627282930313233343536package mainimport \"fmt\"// for 循环func main() { // 基本格式 for i := 0; i &lt;= 10; i++ { fmt.Println(i) } // 套路1 省略初始语句 var i = 0 for ; i &lt;= 3; i++ { fmt.Println(i) } // 套路2 省略结束语句 var n = 5 for n &lt; 10 { fmt.Println(n) n++ } // 无限循环 for { fmt.Println(\"无限循环\") } // for range循环 s := \"Hi月满轩尼诗\" for i, v := range s { fmt.Printf(\"%d %c\\n\", i, v) } // 哑元变量 不想用到的都直接丢给他 s := \"月满轩尼诗\" for _, v := range s { fmt.Printf(\"%c\\n\", v) } 11、Switch123456789101112131415161718192021222324252627282930313233package mainimport \"fmt\"// switch 简化大量判断func main() { // var n = 3 switch n := 3; n { case 1: fmt.Println(\"大拇指\") case 2: fmt.Println(\"食指\") case 3: fmt.Println(\"中指\") case 4: fmt.Println(\"无名指\") case 5: fmt.Println(\"小拇指\") default: fmt.Println(\"异常输入~\") } // 判断奇偶数 switch n := 7; n { case 1, 3, 5, 7: fmt.Println(\"他们是奇数~~\") case 2, 4, 6, 8: fmt.Println(\"他们是偶数~！\") default: fmt.Println(\"猜猜我是谁？\") }} 12、goto1234567891011121314151617181920212223242526272829303132333435363738package mainimport \"fmt\"// gotofunc main() { // 常规操作，跳出多层for循环 var flag = false for i := 0; i &lt; 10; i++ { for j := 'A'; j &lt; 'Z'; j++ { fmt.Println(\"标记flag=true，跳出内循环~~\") flag = true break // 跳出内层循环 } if flag { fmt.Println(\"外层循环发现flag==true, 跳出外层循环！！\") break // 跳出外层循环 } } // 骚操作 goto for i := 0; i &lt; 10; i++ { for j := 0; j &lt; 10; j++ { if j == 2 { // 设置退出标签 fmt.Println(\"跳到当前指定标签：breakTag~~~\") goto breakTag } fmt.Printf(\"%v-%v\\n\", i, j) } } return // 标签breakTag: fmt.Println(\"结束for循环\")} 13、运算符123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package mainimport \"fmt\"// 运算符func main() { var ( a = 5 b = 2 ) // 算术运算符：加减乘除 余数 fmt.Println(\"a+b=\", a+b) fmt.Println(\"a-b=\", a-b) fmt.Println(\"a*b=\", a*b) fmt.Println(\"a/b=\", a/b) fmt.Println(\"a'%'b=\", a%b) // 自增/自减 a++ b-- // 关系运算符 fmt.Println(a == b) // golang 是强类型语言 相同类型的变量才能比较 fmt.Println(a != b) // 不等于 fmt.Println(a &gt; b) //大于 fmt.Println(a &gt;= b) //大小于等于 fmt.Println(a &lt; b) // 小于 fmt.Println(a &lt;= b) // 小于 // 逻辑运算符 // 如果分数大于60分而且小于100分 score := 75 if score &gt; 60 &amp;&amp; score &lt; 100 { fmt.Println(\"好好学习~\") } else { fmt.Println(\"不用学习...\") } // 如果年龄小于18岁或者年龄大于60岁 age := 26 if age &gt; 60 || age &lt; 18 { fmt.Println(\"国家帮养老~~~\") } else { fmt.Println(\"打工仔...\") } // not 取反 isMarried := false fmt.Println(isMarried) // false fmt.Println(!isMarried) // true // 位运算符：针对二进制数 // 5 = 101 2 = 010 （二进制） // &amp;:a按位与 fmt.Println(5 &amp; 2) // 全1为1 000 // |：按位或 fmt.Println(5 | 2) /// 有1为1 111 // ^:按位异或（不一样则为1） fmt.Println(5 ^ 2) // &lt;&lt;:将二进制位往左指定位数 5-&gt;00000101 00010100 fmt.Println(5 &lt;&lt; 2) // &gt;&gt;:将二进制位往右指定位数 5-&gt;00000101 00000001 fmt.Println(5 &gt;&gt; 2) // 赋值运算符 给变量赋值 var x = 10 x++ // x = x +1 x-- // x = x -1 x *= 2 // x = x * 2 x /= 2 // x = x / 2 x %= 2 // x = x % 2 x &lt;&lt;= 2 // x = x &lt;&lt; 2 左移 x &amp;= 2 // x = x &amp; 2 位与 x |= 2 // x = x | 2 位或 x ^= 4 // x = x | 2 异或 x &gt;&gt;= 2 // x = x &lt;&lt; 2 右移} 14、复合数据类型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package mainimport \"fmt\"// 复合数据类型/*数组定义：var 数组变量名 [元素数量]T (类型)存放元素的容器必须制定存放元素的类型和长度golang：数组的长度是数组类型的一部分*/func main() { var list1 [5]int var list2 [10]int fmt.Printf(\"list1:%T list2:%T\\n\", list1, list2) // 数组的初始化 不初始化默认是0 int: 0 string:“” bool:false fmt.Println(list1, list2) // 1、初始化方式01 创建变量的时候赋值 list1 = [5]int{0, 1, 2, 3, 4} fmt.Println(list1) // 2、初始化方式02 根据初始值自动腿短数组的长度是多少 list100 := [...]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} fmt.Printf(\"%T\\n\", list100) // 3、初始化方式03 根据索引初始化 list3 := [5]int{0: 1, 4: 2} fmt.Println(list3) // 数组的遍历 city := [...]string{\"杭州\", \"宁波\", \"金华\"} // 1、根据索引 for i := 0; i &lt; len(city); i++ { fmt.Println(city[i]) } // 2、for range 遍历 for i, v := range city { fmt.Println(i, v) } // 多维数组 // [[1 2] [3 4] [5 6]] var all [3][2]int all = [3][2]int{ [2]int{1, 2}, [2]int{3, 4}, [2]int{5, 6}, } fmt.Println(all) // 多维数组的遍历 for _, v1 := range all { fmt.Println(v1) for _, v2 := range v1 { fmt.Println(v2) } } // 数组是值类型 b1 := [3]int{1, 2, 3} b2 := b1 b2[0] = 100 fmt.Println(b1, b2) // 练习题1 求数组[1,3,5,7,8]元素的和 c1 := [...]int{1, 3, 5, 7, 8} sum := 0 for _, v := range c1 { sum = sum + v } fmt.Println(sum) /* 找出数组中和位置性质的两个元素的下标，比如[1, 3, 5, 7, 8]中找出和为8两个元素的下标分别为(0,3)(1,2) 定义2个for循环 外层从第n个开始遍历 内层for循环从n+1开始找 1和2的和为8 */ for i := 0; i &lt; len(c1); i++ { for j := i + 1; j &lt; len(c1); j++ { if c1[i]+c1[j] == 8 { fmt.Printf(\"(%d, %d)\\n\", i, j) } } }} 练习题1、输出字符串中的汉字数量123456789// 练习：统计一个字符串中汉字的数量 str := \"1234我是汉字I'm man!@#$%^&amp;*()_+\" var count int for _, v := range str { if unicode.Is(unicode.Han, v) { count++ } } fmt.Println(\"当前字符串\" + str + \"\\n\" + \"共有：\" + strconv.Itoa(count) + \"个中文汉字\") 2、for循环打印99乘法表1234567/ 练习打印九九乘法表 for i := 1; i &lt; 10; i++ { for j := 1; j &lt;= i; j++ { fmt.Printf(\"%dx%d=%d\\t\", j, i, i*j) } fmt.Println(\"\") } 输出： 12当前字符串：1234我是汉字I'm man!@#$%^&amp;*()_+共有：4个中文汉字 输出： 1234567891x1=11x2=2 2x2=41x3=3 2x3=6 3x3=91x4=4 2x4=8 3x4=12 4x4=161x5=5 2x5=10 3x5=15 4x5=20 5x5=251x6=6 2x6=12 3x6=18 4x6=24 5x6=30 6x6=361x7=7 2x7=14 3x7=21 4x7=28 5x7=35 6x7=42 7x7=491x8=8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=641x9=9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81 3、求数组[1,3,5,7,8]元素的和123456c1 := [...]int{1, 3, 5, 7, 8} sum := 0 for _, v := range c1 { sum = sum + v } fmt.Println(sum) 4、找出数组中和位置性质的两个元素的下标​ 比如[1, 3, 5, 7, 8]中找出和为8两个元素的下标分别为(0,3)(1,2) 1234567for i := 0; i &lt; len(c1); i++ { for j := i + 1; j &lt; len(c1); j++ { if c1[i]+c1[j] == 8 { fmt.Printf(\"(%d, %d)\\n\", i, j) } } }","link":"/2020/03/01/golang-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"其他","slug":"其他","link":"/tags/%E5%85%B6%E4%BB%96/"},{"name":"hexo博客","slug":"hexo博客","link":"/tags/hexo%E5%8D%9A%E5%AE%A2/"},{"name":"Allure2","slug":"Allure2","link":"/tags/Allure2/"},{"name":"Pytest","slug":"Pytest","link":"/tags/Pytest/"},{"name":"测试报告","slug":"测试报告","link":"/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"},{"name":"移动开发","slug":"移动开发","link":"/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"},{"name":"安卓","slug":"安卓","link":"/tags/%E5%AE%89%E5%8D%93/"},{"name":"学习","slug":"学习","link":"/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"CI/CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"可持续集成","slug":"可持续集成","link":"/tags/%E5%8F%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"ECS","slug":"ECS","link":"/tags/ECS/"},{"name":"阿里云服务器","slug":"阿里云服务器","link":"/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"数据","slug":"数据","link":"/tags/%E6%95%B0%E6%8D%AE/"},{"name":"大数据测试","slug":"大数据测试","link":"/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B5%8B%E8%AF%95/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Smtplib","slug":"Smtplib","link":"/tags/Smtplib/"},{"name":"Email","slug":"Email","link":"/tags/Email/"},{"name":"golang","slug":"golang","link":"/tags/golang/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Pytest","slug":"Pytest","link":"/categories/Pytest/"},{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Jenkins","slug":"Jenkins","link":"/categories/Jenkins/"},{"name":"阿里云ECS","slug":"阿里云ECS","link":"/categories/%E9%98%BF%E9%87%8C%E4%BA%91ECS/"},{"name":"其他","slug":"其他","link":"/categories/%E5%85%B6%E4%BB%96/"},{"name":"大数据","slug":"大数据","link":"/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"golang","slug":"golang","link":"/categories/golang/"},{"name":"go","slug":"golang/go","link":"/categories/golang/go/"}]}